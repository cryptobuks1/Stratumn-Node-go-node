// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/stratumn/alice/grpc/test/test.proto

/*
Package test is a generated protocol buffer package.

It is generated from these files:
	github.com/stratumn/alice/grpc/test/test.proto

It has these top-level messages:
	Message
*/
package test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message_Enum int32

const (
	Message_A Message_Enum = 0
	Message_B Message_Enum = 1
)

var Message_Enum_name = map[int32]string{
	0: "A",
	1: "B",
}
var Message_Enum_value = map[string]int32{
	"A": 0,
	"B": 1,
}

func (x Message_Enum) String() string {
	return proto.EnumName(Message_Enum_name, int32(x))
}
func (Message_Enum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Message struct {
	Noext               string         `protobuf:"bytes,1,opt,name=noext" json:"noext,omitempty"`
	Req                 string         `protobuf:"bytes,2,opt,name=req" json:"req,omitempty"`
	Str                 string         `protobuf:"bytes,10,opt,name=str" json:"str,omitempty"`
	StrRepeated         []string       `protobuf:"bytes,11,rep,name=str_repeated,json=strRepeated" json:"str_repeated,omitempty"`
	Boolean             bool           `protobuf:"varint,12,opt,name=boolean" json:"boolean,omitempty"`
	BooleanRepeated     []bool         `protobuf:"varint,13,rep,packed,name=boolean_repeated,json=booleanRepeated" json:"boolean_repeated,omitempty"`
	I32                 int32          `protobuf:"varint,14,opt,name=i32" json:"i32,omitempty"`
	I32Repeated         []uint32       `protobuf:"varint,15,rep,packed,name=i32_repeated,json=i32Repeated" json:"i32_repeated,omitempty"`
	U32                 uint32         `protobuf:"varint,16,opt,name=u32" json:"u32,omitempty"`
	U32Repeated         []uint32       `protobuf:"varint,17,rep,packed,name=u32_repeated,json=u32Repeated" json:"u32_repeated,omitempty"`
	I64                 int64          `protobuf:"varint,18,opt,name=i64" json:"i64,omitempty"`
	I64Repeated         []int64        `protobuf:"varint,19,rep,packed,name=i64_repeated,json=i64Repeated" json:"i64_repeated,omitempty"`
	U64                 uint64         `protobuf:"varint,20,opt,name=u64" json:"u64,omitempty"`
	U64Repeated         []uint64       `protobuf:"varint,21,rep,packed,name=u64_repeated,json=u64Repeated" json:"u64_repeated,omitempty"`
	Buf                 []byte         `protobuf:"bytes,22,opt,name=buf,proto3" json:"buf,omitempty"`
	BufRepeated         [][]byte       `protobuf:"bytes,23,rep,name=buf_repeated,json=bufRepeated,proto3" json:"buf_repeated,omitempty"`
	Enumeration         Message_Enum   `protobuf:"varint,30,opt,name=enumeration,enum=stratumn.alice.grpc.test.Message_Enum" json:"enumeration,omitempty"`
	EnumerationRepeated []Message_Enum `protobuf:"varint,31,rep,packed,name=enumeration_repeated,json=enumerationRepeated,enum=stratumn.alice.grpc.test.Message_Enum" json:"enumeration_repeated,omitempty"`
	Base58              []byte         `protobuf:"bytes,50,opt,name=base58,proto3" json:"base58,omitempty"`
	Base58Repeated      [][]byte       `protobuf:"bytes,51,rep,name=base58_repeated,json=base58Repeated,proto3" json:"base58_repeated,omitempty"`
	Multiaddr           []byte         `protobuf:"bytes,52,opt,name=multiaddr,proto3" json:"multiaddr,omitempty"`
	MultiaddrRepeated   [][]byte       `protobuf:"bytes,53,rep,name=multiaddr_repeated,json=multiaddrRepeated,proto3" json:"multiaddr_repeated,omitempty"`
	Duration            int64          `protobuf:"varint,54,opt,name=duration" json:"duration,omitempty"`
	DurationRepeated    []int64        `protobuf:"varint,55,rep,packed,name=duration_repeated,json=durationRepeated" json:"duration_repeated,omitempty"`
	Bytesize            uint64         `protobuf:"varint,56,opt,name=bytesize" json:"bytesize,omitempty"`
	BytesizeRepeated    []uint64       `protobuf:"varint,57,rep,packed,name=bytesize_repeated,json=bytesizeRepeated" json:"bytesize_repeated,omitempty"`
	Byterate            uint64         `protobuf:"varint,58,opt,name=byterate" json:"byterate,omitempty"`
	ByterateRepeated    []uint64       `protobuf:"varint,59,rep,packed,name=byterate_repeated,json=byterateRepeated" json:"byterate_repeated,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetNoext() string {
	if m != nil {
		return m.Noext
	}
	return ""
}

func (m *Message) GetReq() string {
	if m != nil {
		return m.Req
	}
	return ""
}

func (m *Message) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *Message) GetStrRepeated() []string {
	if m != nil {
		return m.StrRepeated
	}
	return nil
}

func (m *Message) GetBoolean() bool {
	if m != nil {
		return m.Boolean
	}
	return false
}

func (m *Message) GetBooleanRepeated() []bool {
	if m != nil {
		return m.BooleanRepeated
	}
	return nil
}

func (m *Message) GetI32() int32 {
	if m != nil {
		return m.I32
	}
	return 0
}

func (m *Message) GetI32Repeated() []uint32 {
	if m != nil {
		return m.I32Repeated
	}
	return nil
}

func (m *Message) GetU32() uint32 {
	if m != nil {
		return m.U32
	}
	return 0
}

func (m *Message) GetU32Repeated() []uint32 {
	if m != nil {
		return m.U32Repeated
	}
	return nil
}

func (m *Message) GetI64() int64 {
	if m != nil {
		return m.I64
	}
	return 0
}

func (m *Message) GetI64Repeated() []int64 {
	if m != nil {
		return m.I64Repeated
	}
	return nil
}

func (m *Message) GetU64() uint64 {
	if m != nil {
		return m.U64
	}
	return 0
}

func (m *Message) GetU64Repeated() []uint64 {
	if m != nil {
		return m.U64Repeated
	}
	return nil
}

func (m *Message) GetBuf() []byte {
	if m != nil {
		return m.Buf
	}
	return nil
}

func (m *Message) GetBufRepeated() [][]byte {
	if m != nil {
		return m.BufRepeated
	}
	return nil
}

func (m *Message) GetEnumeration() Message_Enum {
	if m != nil {
		return m.Enumeration
	}
	return Message_A
}

func (m *Message) GetEnumerationRepeated() []Message_Enum {
	if m != nil {
		return m.EnumerationRepeated
	}
	return nil
}

func (m *Message) GetBase58() []byte {
	if m != nil {
		return m.Base58
	}
	return nil
}

func (m *Message) GetBase58Repeated() [][]byte {
	if m != nil {
		return m.Base58Repeated
	}
	return nil
}

func (m *Message) GetMultiaddr() []byte {
	if m != nil {
		return m.Multiaddr
	}
	return nil
}

func (m *Message) GetMultiaddrRepeated() [][]byte {
	if m != nil {
		return m.MultiaddrRepeated
	}
	return nil
}

func (m *Message) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Message) GetDurationRepeated() []int64 {
	if m != nil {
		return m.DurationRepeated
	}
	return nil
}

func (m *Message) GetBytesize() uint64 {
	if m != nil {
		return m.Bytesize
	}
	return 0
}

func (m *Message) GetBytesizeRepeated() []uint64 {
	if m != nil {
		return m.BytesizeRepeated
	}
	return nil
}

func (m *Message) GetByterate() uint64 {
	if m != nil {
		return m.Byterate
	}
	return 0
}

func (m *Message) GetByterateRepeated() []uint64 {
	if m != nil {
		return m.ByterateRepeated
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "stratumn.alice.grpc.test.Message")
	proto.RegisterEnum("stratumn.alice.grpc.test.Message_Enum", Message_Enum_name, Message_Enum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Test service

type TestClient interface {
	UnaryReq(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	ServerStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (Test_ServerStreamClient, error)
	NoExt(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type testClient struct {
	cc *grpc.ClientConn
}

func NewTestClient(cc *grpc.ClientConn) TestClient {
	return &testClient{cc}
}

func (c *testClient) UnaryReq(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.test.Test/UnaryReq", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) ServerStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (Test_ServerStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Test_serviceDesc.Streams[0], c.cc, "/stratumn.alice.grpc.test.Test/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Test_ServerStreamClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type testServerStreamClient struct {
	grpc.ClientStream
}

func (x *testServerStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) NoExt(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.test.Test/NoExt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Test service

type TestServer interface {
	UnaryReq(context.Context, *Message) (*Message, error)
	ServerStream(*Message, Test_ServerStreamServer) error
	NoExt(context.Context, *Message) (*Message, error)
}

func RegisterTestServer(s *grpc.Server, srv TestServer) {
	s.RegisterService(&_Test_serviceDesc, srv)
}

func _Test_UnaryReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).UnaryReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.test.Test/UnaryReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).UnaryReq(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServer).ServerStream(m, &testServerStreamServer{stream})
}

type Test_ServerStreamServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type testServerStreamServer struct {
	grpc.ServerStream
}

func (x *testServerStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Test_NoExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).NoExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.test.Test/NoExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).NoExt(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Test_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratumn.alice.grpc.test.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryReq",
			Handler:    _Test_UnaryReq_Handler,
		},
		{
			MethodName: "NoExt",
			Handler:    _Test_NoExt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _Test_ServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/stratumn/alice/grpc/test/test.proto",
}

func init() { proto.RegisterFile("github.com/stratumn/alice/grpc/test/test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 852 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0xae, 0xeb, 0xdd, 0x76, 0x77, 0xf2, 0x7b, 0x36, 0xed, 0x0e, 0x95, 0xa0, 0xb3, 0x39, 0xa0,
	0x11, 0xaa, 0x1c, 0x64, 0x7b, 0x4d, 0x61, 0xb9, 0x60, 0xa9, 0x9c, 0x80, 0x4a, 0x29, 0x48, 0x88,
	0x0b, 0xb2, 0x93, 0x49, 0xb0, 0x94, 0xd8, 0xbb, 0xe3, 0x19, 0xb4, 0xe5, 0xc8, 0x5f, 0xc0, 0xb1,
	0x67, 0x5f, 0xe0, 0x1f, 0xe0, 0x64, 0x90, 0xf8, 0x67, 0xb8, 0x73, 0xe4, 0x88, 0x66, 0xc6, 0x1e,
	0xdb, 0xa1, 0x68, 0xa9, 0xb4, 0x87, 0x38, 0xe3, 0xf7, 0xde, 0xf7, 0xbe, 0xef, 0x1b, 0xcf, 0x8b,
	0x03, 0x9c, 0x4d, 0xc2, 0xbf, 0x13, 0xb1, 0xb3, 0xcc, 0x76, 0xf3, 0x9c, 0xb3, 0x88, 0x8b, 0x5d,
	0x3a, 0x8f, 0xb6, 0xc9, 0x92, 0xce, 0x37, 0xec, 0x72, 0x39, 0xe7, 0x34, 0xe7, 0xea, 0xe2, 0x5c,
	0xb2, 0x8c, 0x67, 0x10, 0xd5, 0x45, 0x8e, 0x2a, 0x72, 0x64, 0x91, 0x23, 0xf3, 0x8f, 0x9e, 0xdc,
	0xd0, 0x89, 0x5e, 0x73, 0xf9, 0xd1, 0x7d, 0x66, 0x7f, 0xf6, 0xc1, 0xfd, 0xcf, 0x69, 0x9e, 0x47,
	0x1b, 0x0a, 0xa7, 0xe0, 0x30, 0xcd, 0xe8, 0x35, 0x47, 0x16, 0xb6, 0xc8, 0xf1, 0x42, 0xdf, 0x40,
	0x02, 0x6c, 0x46, 0xaf, 0xd0, 0x5d, 0x19, 0x0b, 0x1f, 0x16, 0x25, 0x1a, 0x32, 0x7a, 0x25, 0x12,
	0x46, 0x57, 0x78, 0x9d, 0xd0, 0xed, 0xea, 0x97, 0x12, 0x59, 0x0b, 0x59, 0x02, 0x67, 0xc0, 0xce,
	0x39, 0x43, 0x40, 0x55, 0x8e, 0x8b, 0x12, 0xf5, 0x73, 0xce, 0x92, 0x74, 0xa3, 0xeb, 0x16, 0x32,
	0x09, 0x3f, 0x06, 0x32, 0xf8, 0x2d, 0xa3, 0x97, 0x34, 0xe2, 0x74, 0x85, 0x7a, 0xd8, 0x26, 0xc7,
	0xe1, 0x5b, 0x45, 0x89, 0x1e, 0x54, 0xc5, 0x75, 0xaa, 0x42, 0xf5, 0x72, 0xce, 0x16, 0x55, 0x08,
	0x12, 0x70, 0x3f, 0xce, 0xb2, 0x2d, 0x8d, 0x52, 0xd4, 0xc7, 0x16, 0x39, 0x0a, 0x87, 0x45, 0x89,
	0x80, 0x0c, 0x55, 0xd5, 0x75, 0x1a, 0x86, 0x60, 0x5c, 0x2d, 0x1b, 0xae, 0x01, 0xb6, 0xc9, 0x51,
	0x78, 0x5a, 0x94, 0xe8, 0x44, 0x41, 0xf6, 0x98, 0x46, 0x15, 0xc0, 0xb0, 0x9d, 0x01, 0x3b, 0xf1,
	0x5c, 0x34, 0xc4, 0x16, 0x39, 0x0c, 0x47, 0x45, 0x89, 0x7a, 0x49, 0xca, 0x3d, 0xb7, 0xb6, 0x93,
	0x78, 0x2e, 0xbc, 0x00, 0xfd, 0xc4, 0x73, 0x1b, 0x8a, 0x11, 0xb6, 0xc9, 0x20, 0x44, 0x45, 0x89,
	0xa6, 0xba, 0x76, 0xdf, 0x4d, 0xe2, 0xb9, 0xa6, 0xff, 0x0c, 0xd8, 0xc2, 0x73, 0xd1, 0x18, 0x5b,
	0x64, 0xa0, 0xf7, 0x4b, 0x74, 0x08, 0x84, 0xe7, 0xca, 0xfd, 0x12, 0x6d, 0x82, 0x89, 0x22, 0x50,
	0xfb, 0x25, 0x5e, 0xcf, 0x20, 0x5a, 0x0c, 0xd2, 0x41, 0xe0, 0x23, 0x88, 0x2d, 0x62, 0x1b, 0x07,
	0x81, 0x6f, 0x1c, 0x04, 0xbe, 0x72, 0x10, 0xf8, 0x0d, 0xc1, 0x09, 0xb6, 0x89, 0x6d, 0x1c, 0x04,
	0xfe, 0xbf, 0x1d, 0x04, 0x7e, 0xc7, 0x41, 0xe0, 0xa3, 0x29, 0xb6, 0xc8, 0x41, 0xe3, 0xa0, 0x21,
	0x10, 0x81, 0xaf, 0x1c, 0xb4, 0x09, 0x1e, 0x60, 0x9b, 0x1c, 0x34, 0x0e, 0x5e, 0xc3, 0x20, 0x5a,
	0x0c, 0x67, 0xc0, 0x8e, 0xc5, 0x1a, 0x3d, 0xc4, 0x16, 0xe9, 0x6b, 0x07, 0xf1, 0x4b, 0x4e, 0xf3,
	0x9a, 0x20, 0x16, 0x6b, 0xe9, 0x20, 0x16, 0xeb, 0x86, 0xe0, 0x14, 0xdb, 0xa4, 0xaf, 0x1d, 0xe8,
	0xda, 0xfd, 0xfe, 0xb1, 0x58, 0x9b, 0xfe, 0x5f, 0x83, 0x1e, 0x4d, 0xc5, 0x8e, 0xb2, 0x88, 0x27,
	0x59, 0x8a, 0xde, 0xc1, 0x16, 0x19, 0xba, 0xef, 0x3a, 0xff, 0x35, 0x5d, 0x4e, 0x35, 0x2b, 0xce,
	0xb3, 0x54, 0xec, 0xf4, 0xe9, 0x93, 0xf0, 0xba, 0x73, 0xab, 0x15, 0x64, 0x60, 0xda, 0xba, 0x6d,
	0xe4, 0x3d, 0xc6, 0xf6, 0x1b, 0x50, 0xa8, 0xd3, 0xaa, 0x28, 0xf6, 0x5c, 0x9c, 0xb4, 0x9a, 0x1b,
	0x37, 0x4f, 0xc0, 0xbd, 0x38, 0xca, 0xe9, 0xf9, 0x53, 0xe4, 0xaa, 0x0d, 0x9b, 0xca, 0x47, 0xa2,
	0x23, 0x1a, 0xf6, 0x97, 0x1c, 0xd6, 0xaa, 0x06, 0x7e, 0x0a, 0x46, 0x7a, 0xd5, 0x88, 0xf3, 0xd4,
	0xde, 0xbd, 0x2d, 0x1f, 0x4e, 0x05, 0xeb, 0xd2, 0x2a, 0xfc, 0x50, 0xa7, 0x0c, 0xeb, 0x39, 0x38,
	0xde, 0x89, 0x2d, 0x4f, 0xa2, 0xd5, 0x8a, 0x21, 0x5f, 0x11, 0x4b, 0xd9, 0x23, 0x13, 0xd4, 0xd8,
	0xbf, 0x25, 0xb6, 0xa9, 0x84, 0xcf, 0x01, 0x34, 0x37, 0x8d, 0x82, 0x73, 0xa5, 0x00, 0x17, 0x25,
	0x42, 0x0d, 0xbe, 0x2b, 0x42, 0x35, 0x9a, 0x98, 0xac, 0xd1, 0xe1, 0x82, 0xa3, 0x95, 0xa8, 0x1e,
	0x64, 0xa0, 0x8e, 0xbc, 0xfa, 0xb9, 0xaa, 0x63, 0x1a, 0xfc, 0xc7, 0x6f, 0xc8, 0x5a, 0x98, 0x3a,
	0xf8, 0x19, 0x98, 0xd4, 0xeb, 0x46, 0xc3, 0x07, 0x6a, 0x06, 0x1e, 0x17, 0x25, 0x3a, 0x35, 0xe0,
	0xae, 0x04, 0xd5, 0x65, 0x5c, 0x27, 0xdb, 0x0a, 0xd4, 0x91, 0x4b, 0x7e, 0xa0, 0xe8, 0xa9, 0x1a,
	0x0a, 0xa5, 0xa0, 0x8e, 0x69, 0xec, 0x4f, 0xbf, 0x4b, 0x05, 0x75, 0x4c, 0x2a, 0xa8, 0xd7, 0x8d,
	0x82, 0x0f, 0xd5, 0x90, 0x28, 0x05, 0x06, 0xdc, 0x55, 0xa0, 0xba, 0x8c, 0xeb, 0xe4, 0xbe, 0x02,
	0x16, 0x71, 0x8a, 0x3e, 0xea, 0x2a, 0x90, 0x31, 0x8d, 0x7d, 0x65, 0x14, 0xc8, 0x58, 0xad, 0x40,
	0xae, 0x1b, 0x05, 0x17, 0x5d, 0x05, 0x0a, 0xdc, 0x55, 0xf0, 0xca, 0x28, 0x90, 0xc9, 0x5a, 0xc1,
	0x6c, 0x0a, 0x0e, 0xe4, 0xc9, 0x85, 0x87, 0xc0, 0xfa, 0x64, 0x7c, 0x47, 0x7e, 0x85, 0x63, 0xcb,
	0xfd, 0xf9, 0x2e, 0x38, 0xf8, 0x92, 0xe6, 0x1c, 0x2e, 0xc1, 0xd1, 0x57, 0x69, 0xc4, 0x5e, 0x2e,
	0xe8, 0x15, 0x3c, 0xbb, 0x71, 0x08, 0x1e, 0xdd, 0x5c, 0x32, 0x9b, 0xfc, 0xf8, 0x2b, 0x1a, 0xa8,
	0x9e, 0x58, 0xbe, 0x99, 0x24, 0x49, 0x02, 0xfa, 0x2f, 0x28, 0xfb, 0x9e, 0xb2, 0x17, 0x9c, 0xd1,
	0x68, 0x77, 0x9b, 0x44, 0xba, 0x2f, 0xce, 0x55, 0xe3, 0xf7, 0x2d, 0xf8, 0x1c, 0x1c, 0x7e, 0x91,
	0x3d, 0xbb, 0xe6, 0xb7, 0xc4, 0x71, 0x27, 0x7c, 0xef, 0x1b, 0xf2, 0x3f, 0xfe, 0x0b, 0x5c, 0xc8,
	0x4b, 0x7c, 0x4f, 0xbd, 0xc4, 0xbd, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x61, 0x1c, 0x07,
	0x3e, 0x08, 0x00, 0x00,
}
