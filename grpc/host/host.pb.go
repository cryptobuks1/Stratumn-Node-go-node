// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/stratumn/alice/grpc/host/host.proto

/*
Package host is a generated protocol buffer package.

It is generated from these files:
	github.com/stratumn/alice/grpc/host/host.proto

It has these top-level messages:
	IdReq
	AddressesReq
	ConnectReq
	HostId
	Address
	Connection
*/
package host

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The ID request message.
type IdReq struct {
}

func (m *IdReq) Reset()                    { *m = IdReq{} }
func (m *IdReq) String() string            { return proto.CompactTextString(m) }
func (*IdReq) ProtoMessage()               {}
func (*IdReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The address request message.
type AddressesReq struct {
}

func (m *AddressesReq) Reset()                    { *m = AddressesReq{} }
func (m *AddressesReq) String() string            { return proto.CompactTextString(m) }
func (*AddressesReq) ProtoMessage()               {}
func (*AddressesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// The connect request message.
type ConnectReq struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *ConnectReq) Reset()                    { *m = ConnectReq{} }
func (m *ConnectReq) String() string            { return proto.CompactTextString(m) }
func (*ConnectReq) ProtoMessage()               {}
func (*ConnectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConnectReq) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

// The host ID message containing the ID of the host.
type HostId struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *HostId) Reset()                    { *m = HostId{} }
func (m *HostId) String() string            { return proto.CompactTextString(m) }
func (*HostId) ProtoMessage()               {}
func (*HostId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HostId) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// The address message containing a multiaddress.
type Address struct {
	Address []byte `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Address) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

// The connection message containing the peer ID and addresses.
type Connection struct {
	PeerId        []byte `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	LocalAddress  []byte `protobuf:"bytes,2,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	RemoteAddress []byte `protobuf:"bytes,3,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
}

func (m *Connection) Reset()                    { *m = Connection{} }
func (m *Connection) String() string            { return proto.CompactTextString(m) }
func (*Connection) ProtoMessage()               {}
func (*Connection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Connection) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *Connection) GetLocalAddress() []byte {
	if m != nil {
		return m.LocalAddress
	}
	return nil
}

func (m *Connection) GetRemoteAddress() []byte {
	if m != nil {
		return m.RemoteAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*IdReq)(nil), "stratumn.alice.grpc.host.IdReq")
	proto.RegisterType((*AddressesReq)(nil), "stratumn.alice.grpc.host.AddressesReq")
	proto.RegisterType((*ConnectReq)(nil), "stratumn.alice.grpc.host.ConnectReq")
	proto.RegisterType((*HostId)(nil), "stratumn.alice.grpc.host.HostId")
	proto.RegisterType((*Address)(nil), "stratumn.alice.grpc.host.Address")
	proto.RegisterType((*Connection)(nil), "stratumn.alice.grpc.host.Connection")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Host service

type HostClient interface {
	// Returns the host ID.
	ID(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*HostId, error)
	// Streams the host addresses.
	Addresses(ctx context.Context, in *AddressesReq, opts ...grpc.CallOption) (Host_AddressesClient, error)
	// Connects to a multiaddress.
	Connect(ctx context.Context, in *ConnectReq, opts ...grpc.CallOption) (Host_ConnectClient, error)
}

type hostClient struct {
	cc *grpc.ClientConn
}

func NewHostClient(cc *grpc.ClientConn) HostClient {
	return &hostClient{cc}
}

func (c *hostClient) ID(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*HostId, error) {
	out := new(HostId)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.host.Host/ID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) Addresses(ctx context.Context, in *AddressesReq, opts ...grpc.CallOption) (Host_AddressesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Host_serviceDesc.Streams[0], c.cc, "/stratumn.alice.grpc.host.Host/Addresses", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostAddressesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Host_AddressesClient interface {
	Recv() (*Address, error)
	grpc.ClientStream
}

type hostAddressesClient struct {
	grpc.ClientStream
}

func (x *hostAddressesClient) Recv() (*Address, error) {
	m := new(Address)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostClient) Connect(ctx context.Context, in *ConnectReq, opts ...grpc.CallOption) (Host_ConnectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Host_serviceDesc.Streams[1], c.cc, "/stratumn.alice.grpc.host.Host/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Host_ConnectClient interface {
	Recv() (*Connection, error)
	grpc.ClientStream
}

type hostConnectClient struct {
	grpc.ClientStream
}

func (x *hostConnectClient) Recv() (*Connection, error) {
	m := new(Connection)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Host service

type HostServer interface {
	// Returns the host ID.
	ID(context.Context, *IdReq) (*HostId, error)
	// Streams the host addresses.
	Addresses(*AddressesReq, Host_AddressesServer) error
	// Connects to a multiaddress.
	Connect(*ConnectReq, Host_ConnectServer) error
}

func RegisterHostServer(s *grpc.Server, srv HostServer) {
	s.RegisterService(&_Host_serviceDesc, srv)
}

func _Host_ID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).ID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.host.Host/ID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).ID(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_Addresses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AddressesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServer).Addresses(m, &hostAddressesServer{stream})
}

type Host_AddressesServer interface {
	Send(*Address) error
	grpc.ServerStream
}

type hostAddressesServer struct {
	grpc.ServerStream
}

func (x *hostAddressesServer) Send(m *Address) error {
	return x.ServerStream.SendMsg(m)
}

func _Host_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServer).Connect(m, &hostConnectServer{stream})
}

type Host_ConnectServer interface {
	Send(*Connection) error
	grpc.ServerStream
}

type hostConnectServer struct {
	grpc.ServerStream
}

func (x *hostConnectServer) Send(m *Connection) error {
	return x.ServerStream.SendMsg(m)
}

var _Host_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratumn.alice.grpc.host.Host",
	HandlerType: (*HostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ID",
			Handler:    _Host_ID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Addresses",
			Handler:       _Host_Addresses_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Connect",
			Handler:       _Host_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/stratumn/alice/grpc/host/host.proto",
}

func init() { proto.RegisterFile("github.com/stratumn/alice/grpc/host/host.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4d, 0x6b, 0xd4, 0x40,
	0x18, 0xc7, 0x99, 0x58, 0x37, 0xf8, 0x90, 0xf6, 0x30, 0x28, 0x8c, 0x81, 0xd6, 0x69, 0x10, 0xed,
	0xfa, 0x32, 0x29, 0xf5, 0xe8, 0x45, 0xeb, 0x0a, 0x06, 0xf4, 0xb2, 0x47, 0x2f, 0x65, 0x36, 0x19,
	0x9a, 0x81, 0x6c, 0x26, 0x9d, 0x99, 0x80, 0xe2, 0x6d, 0x05, 0x3f, 0x88, 0x27, 0xbf, 0xc0, 0x9e,
	0xf6, 0x4b, 0xf5, 0xe8, 0x51, 0x26, 0x6f, 0x5d, 0xc5, 0xb0, 0x3d, 0x64, 0x20, 0xf3, 0xff, 0xe5,
	0xf7, 0x24, 0xcf, 0x33, 0x01, 0x76, 0x29, 0x6d, 0x5e, 0x2f, 0x58, 0xaa, 0x96, 0xb1, 0xb1, 0x9a,
	0xdb, 0x7a, 0x59, 0xc6, 0xbc, 0x90, 0xa9, 0x88, 0x2f, 0x75, 0x95, 0xc6, 0xb9, 0x32, 0xb6, 0x59,
	0x58, 0xa5, 0x95, 0x55, 0x98, 0xf4, 0x10, 0x6b, 0x20, 0xe6, 0x20, 0xe6, 0xf2, 0xf0, 0xc5, 0x0e,
	0x93, 0xf8, 0x62, 0xdd, 0xd5, 0x7a, 0x22, 0x1f, 0xee, 0x26, 0xd9, 0x5c, 0x5c, 0x45, 0x07, 0x10,
	0xbc, 0xcd, 0x32, 0x2d, 0x8c, 0x11, 0xc6, 0xdd, 0xbf, 0x01, 0x78, 0xa7, 0xca, 0x52, 0xa4, 0x76,
	0x2e, 0xae, 0xf0, 0x19, 0xf8, 0xbc, 0x4d, 0x09, 0xa2, 0xe8, 0x24, 0x38, 0x27, 0x3f, 0x37, 0x24,
	0xf8, 0x54, 0x17, 0x56, 0x76, 0xfb, 0xbf, 0x36, 0x04, 0xfd, 0xde, 0x10, 0x34, 0xef, 0xc1, 0xe8,
	0x08, 0x26, 0x1f, 0x94, 0xb1, 0x49, 0x86, 0xef, 0x83, 0x27, 0xb3, 0xee, 0xc1, 0xbd, 0x6b, 0x07,
	0x79, 0x32, 0x8b, 0xa6, 0xe0, 0x77, 0x15, 0xf1, 0xd1, 0x8d, 0xde, 0x6b, 0xa9, 0xbf, 0x55, 0xdf,
	0xd1, 0xf0, 0x36, 0x52, 0x95, 0xf8, 0x10, 0xfc, 0x4a, 0x08, 0x7d, 0xf1, 0x8f, 0x74, 0xe2, 0x36,
	0x93, 0x0c, 0x4f, 0x61, 0xbf, 0x50, 0x29, 0x2f, 0x2e, 0xfe, 0xe7, 0x0c, 0x9a, 0xa8, 0x2f, 0xfc,
	0x1c, 0x0e, 0xb4, 0x58, 0x2a, 0x2b, 0x06, 0xf6, 0xce, 0x16, 0xbb, 0xdf, 0x66, 0x1d, 0x7c, 0x76,
	0xed, 0xc1, 0x9e, 0xfb, 0x22, 0xbc, 0x00, 0x2f, 0x99, 0xe1, 0x47, 0x6c, 0x6c, 0x06, 0xac, 0x69,
	0x69, 0x48, 0xc7, 0x81, 0xb6, 0x31, 0xd1, 0xc3, 0xd5, 0x9a, 0x3c, 0x98, 0x49, 0x53, 0x15, 0xfc,
	0x2b, 0xb5, 0xb9, 0xa0, 0x2e, 0x7c, 0x6a, 0x68, 0x32, 0xc3, 0xdf, 0xe0, 0xde, 0x30, 0x0f, 0xfc,
	0x64, 0xdc, 0xb4, 0x3d, 0xb4, 0xf0, 0x78, 0x27, 0x17, 0x1d, 0xaf, 0xd6, 0xe4, 0xf0, 0xa3, 0x34,
	0x96, 0xf2, 0xa2, 0xd8, 0xae, 0xc9, 0x7b, 0xd1, 0x29, 0xc2, 0x3f, 0x10, 0xf8, 0x5d, 0xbf, 0xf1,
	0xe3, 0x71, 0xe7, 0xcd, 0x01, 0x09, 0x77, 0x53, 0x52, 0x95, 0xd1, 0xcb, 0xd5, 0x9a, 0x4c, 0xdf,
	0x97, 0xa6, 0xd6, 0xc2, 0x95, 0xd6, 0x82, 0x4a, 0x43, 0x39, 0x4d, 0x07, 0x82, 0x5a, 0x45, 0x6d,
	0x2e, 0x0d, 0x75, 0xa3, 0x3c, 0x45, 0xe7, 0xcf, 0x3e, 0x9f, 0xdc, 0xe2, 0xc7, 0x78, 0xed, 0x96,
	0xc5, 0xa4, 0x39, 0xd1, 0xaf, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x01, 0x8d, 0x4d, 0x13, 0x4b,
	0x03, 0x00, 0x00,
}
