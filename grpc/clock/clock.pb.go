// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/stratumn/alice/grpc/clock/clock.proto

/*
Package clock is a generated protocol buffer package.

It is generated from these files:
	github.com/stratumn/alice/grpc/clock/clock.proto

It has these top-level messages:
	LocalReq
	RemoteReq
	Time
*/
package clock

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The Local request message.
type LocalReq struct {
}

func (m *LocalReq) Reset()                    { *m = LocalReq{} }
func (m *LocalReq) String() string            { return proto.CompactTextString(m) }
func (*LocalReq) ProtoMessage()               {}
func (*LocalReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The Remote request message.
type RemoteReq struct {
	PeerId []byte `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (m *RemoteReq) Reset()                    { *m = RemoteReq{} }
func (m *RemoteReq) String() string            { return proto.CompactTextString(m) }
func (*RemoteReq) ProtoMessage()               {}
func (*RemoteReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RemoteReq) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

// The time message containing a Unix nano timestamp.
type Time struct {
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Time) Reset()                    { *m = Time{} }
func (m *Time) String() string            { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()               {}
func (*Time) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Time) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*LocalReq)(nil), "stratumn.alice.grpc.clock.LocalReq")
	proto.RegisterType((*RemoteReq)(nil), "stratumn.alice.grpc.clock.RemoteReq")
	proto.RegisterType((*Time)(nil), "stratumn.alice.grpc.clock.Time")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Clock service

type ClockClient interface {
	// Returns the local time.
	Local(ctx context.Context, in *LocalReq, opts ...grpc.CallOption) (*Time, error)
	// Returns a peer's remote time.
	Remote(ctx context.Context, in *RemoteReq, opts ...grpc.CallOption) (*Time, error)
}

type clockClient struct {
	cc *grpc.ClientConn
}

func NewClockClient(cc *grpc.ClientConn) ClockClient {
	return &clockClient{cc}
}

func (c *clockClient) Local(ctx context.Context, in *LocalReq, opts ...grpc.CallOption) (*Time, error) {
	out := new(Time)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.clock.Clock/Local", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clockClient) Remote(ctx context.Context, in *RemoteReq, opts ...grpc.CallOption) (*Time, error) {
	out := new(Time)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.clock.Clock/Remote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Clock service

type ClockServer interface {
	// Returns the local time.
	Local(context.Context, *LocalReq) (*Time, error)
	// Returns a peer's remote time.
	Remote(context.Context, *RemoteReq) (*Time, error)
}

func RegisterClockServer(s *grpc.Server, srv ClockServer) {
	s.RegisterService(&_Clock_serviceDesc, srv)
}

func _Clock_Local_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClockServer).Local(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.clock.Clock/Local",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClockServer).Local(ctx, req.(*LocalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clock_Remote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClockServer).Remote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.clock.Clock/Remote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClockServer).Remote(ctx, req.(*RemoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Clock_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratumn.alice.grpc.clock.Clock",
	HandlerType: (*ClockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Local",
			Handler:    _Clock_Local_Handler,
		},
		{
			MethodName: "Remote",
			Handler:    _Clock_Remote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/stratumn/alice/grpc/clock/clock.proto",
}

func init() { proto.RegisterFile("github.com/stratumn/alice/grpc/clock/clock.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x48, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x2e, 0x29, 0x4a, 0x2c, 0x29, 0xcd, 0xcd, 0xd3,
	0x4f, 0xcc, 0xc9, 0x4c, 0x4e, 0xd5, 0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x4f, 0xce, 0xc9, 0x4f, 0xce,
	0x86, 0x90, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x92, 0x30, 0x65, 0x7a, 0x60, 0x65, 0x7a,
	0x20, 0x65, 0x7a, 0x60, 0x05, 0x52, 0x3a, 0x04, 0x0c, 0x4b, 0xad, 0x28, 0x01, 0x61, 0x88, 0x41,
	0x4a, 0x5c, 0x5c, 0x1c, 0x3e, 0xf9, 0xc9, 0x89, 0x39, 0x41, 0xa9, 0x85, 0x4a, 0x96, 0x5c, 0x9c,
	0x41, 0xa9, 0xb9, 0xf9, 0x25, 0xa9, 0x41, 0xa9, 0x85, 0x42, 0x3a, 0x5c, 0xec, 0x05, 0xa9, 0xa9,
	0x45, 0xf1, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x4e, 0xc2, 0x8b, 0x76, 0x4b, 0xb0,
	0x07, 0xa4, 0xa6, 0x16, 0x29, 0x78, 0xba, 0xac, 0xd8, 0x2d, 0xc1, 0xf8, 0x61, 0xb7, 0x04, 0x63,
	0x10, 0x1b, 0x48, 0x8d, 0x67, 0x8a, 0x92, 0x16, 0x17, 0x4b, 0x48, 0x66, 0x6e, 0xaa, 0x90, 0x12,
	0x17, 0x67, 0x49, 0x66, 0x6e, 0x6a, 0x71, 0x49, 0x62, 0x6e, 0x01, 0x58, 0x1f, 0xb3, 0x13, 0xcb,
	0x81, 0x3d, 0x12, 0x8c, 0x41, 0x08, 0x61, 0xa3, 0x77, 0x8c, 0x5c, 0xac, 0xce, 0x20, 0xa7, 0x0a,
	0x15, 0x70, 0xb1, 0x82, 0x2d, 0x17, 0x52, 0xd6, 0xc3, 0xe9, 0x1f, 0x3d, 0x98, 0xf3, 0xa4, 0xe4,
	0xf1, 0x28, 0x02, 0x59, 0xae, 0xa4, 0xd8, 0xb4, 0x55, 0x42, 0xd6, 0x25, 0xb3, 0xb8, 0x20, 0x27,
	0xb1, 0x52, 0xa1, 0x24, 0x23, 0x55, 0x21, 0x2f, 0x3f, 0x25, 0x55, 0xbd, 0x58, 0x21, 0x07, 0x64,
	0x82, 0x02, 0xc8, 0x01, 0x42, 0xc5, 0x5c, 0x6c, 0x10, 0x2f, 0x0a, 0xa9, 0xe0, 0x31, 0x0d, 0x1e,
	0x0a, 0x84, 0xed, 0x54, 0x6a, 0xda, 0x2a, 0x21, 0x87, 0x6c, 0x27, 0x28, 0x40, 0xd4, 0x8b, 0x15,
	0x8a, 0xc0, 0x46, 0x80, 0x2d, 0x75, 0xd2, 0x89, 0xd2, 0x22, 0x26, 0x82, 0xad, 0xc1, 0x64, 0x12,
	0x1b, 0x38, 0x62, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x10, 0xe3, 0x27, 0x0f, 0x15, 0x02,
	0x00, 0x00,
}
