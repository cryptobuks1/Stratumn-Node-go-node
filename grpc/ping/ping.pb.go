// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/stratumn/alice/grpc/ping/ping.proto

/*
Package ping is a generated protocol buffer package.

It is generated from these files:
	github.com/stratumn/alice/grpc/ping/ping.proto

It has these top-level messages:
	PingReq
	Response
*/
package ping

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The ping request message.
type PingReq struct {
	PeerId []byte `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Times  uint32 `protobuf:"varint,2,opt,name=times" json:"times,omitempty"`
}

func (m *PingReq) Reset()                    { *m = PingReq{} }
func (m *PingReq) String() string            { return proto.CompactTextString(m) }
func (*PingReq) ProtoMessage()               {}
func (*PingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingReq) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *PingReq) GetTimes() uint32 {
	if m != nil {
		return m.Times
	}
	return 0
}

// The response message containing the latenty.
type Response struct {
	Latency int64 `protobuf:"varint,1,opt,name=latency" json:"latency,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetLatency() int64 {
	if m != nil {
		return m.Latency
	}
	return 0
}

func init() {
	proto.RegisterType((*PingReq)(nil), "stratumn.alice.grpc.ping.PingReq")
	proto.RegisterType((*Response)(nil), "stratumn.alice.grpc.ping.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Ping service

type PingClient interface {
	// Pings an address and streams responses.
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (Ping_PingClient, error)
}

type pingClient struct {
	cc *grpc.ClientConn
}

func NewPingClient(cc *grpc.ClientConn) PingClient {
	return &pingClient{cc}
}

func (c *pingClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (Ping_PingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ping_serviceDesc.Streams[0], c.cc, "/stratumn.alice.grpc.ping.Ping/Ping", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingPingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ping_PingClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type pingPingClient struct {
	grpc.ClientStream
}

func (x *pingPingClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Ping service

type PingServer interface {
	// Pings an address and streams responses.
	Ping(*PingReq, Ping_PingServer) error
}

func RegisterPingServer(s *grpc.Server, srv PingServer) {
	s.RegisterService(&_Ping_serviceDesc, srv)
}

func _Ping_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingServer).Ping(m, &pingPingServer{stream})
}

type Ping_PingServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type pingPingServer struct {
	grpc.ServerStream
}

func (x *pingPingServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _Ping_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratumn.alice.grpc.ping.Ping",
	HandlerType: (*PingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ping",
			Handler:       _Ping_Ping_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/stratumn/alice/grpc/ping/ping.proto",
}

func init() { proto.RegisterFile("github.com/stratumn/alice/grpc/ping/ping.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4b, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x2e, 0x29, 0x4a, 0x2c, 0x29, 0xcd, 0xcd, 0xd3,
	0x4f, 0xcc, 0xc9, 0x4c, 0x4e, 0xd5, 0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x2f, 0xc8, 0xcc, 0x4b, 0x07,
	0x13, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x12, 0x30, 0x45, 0x7a, 0x60, 0x45, 0x7a, 0x20,
	0x45, 0x7a, 0x20, 0x79, 0x29, 0x1d, 0x02, 0x26, 0xa5, 0x56, 0x94, 0x80, 0x30, 0xc4, 0x1c, 0xa5,
	0x34, 0x2e, 0xf6, 0x80, 0xcc, 0xbc, 0xf4, 0xa0, 0xd4, 0x42, 0x21, 0x1d, 0x2e, 0xf6, 0x82, 0xd4,
	0xd4, 0xa2, 0xf8, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x1e, 0x27, 0xe1, 0x45, 0xbb, 0x25,
	0xd8, 0x03, 0x52, 0x53, 0x8b, 0x14, 0x3c, 0x5d, 0x56, 0xec, 0x96, 0x60, 0xfc, 0xb0, 0x5b, 0x82,
	0x31, 0x88, 0x0d, 0xa4, 0xc6, 0x33, 0x45, 0x48, 0x97, 0x8b, 0xb5, 0x24, 0x33, 0x37, 0xb5, 0x58,
	0x82, 0x49, 0x81, 0x51, 0x83, 0xd7, 0x49, 0x7c, 0xd1, 0x6e, 0x09, 0xe1, 0x90, 0x8c, 0x54, 0x85,
	0xbc, 0xd2, 0xdc, 0xa4, 0xd4, 0x22, 0x85, 0xfc, 0x34, 0x05, 0x90, 0x6b, 0x8a, 0x83, 0x20, 0xaa,
	0x94, 0xb4, 0xb8, 0x38, 0x82, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0xe4, 0xb8, 0xd8,
	0x73, 0x12, 0x4b, 0x52, 0xf3, 0x92, 0x2b, 0xc1, 0x16, 0x31, 0x3b, 0xb1, 0x9c, 0xd8, 0x23, 0xc1,
	0x18, 0x04, 0x13, 0x34, 0xca, 0xe0, 0x62, 0x01, 0xb9, 0x49, 0x28, 0x01, 0x4a, 0x2b, 0xea, 0xe1,
	0xf2, 0xac, 0x1e, 0xd4, 0xed, 0x52, 0x4a, 0xb8, 0x95, 0xc0, 0xac, 0x55, 0xe2, 0x6f, 0xda, 0x2a,
	0xc1, 0x0d, 0xd2, 0xa0, 0x90, 0xa8, 0x00, 0xf2, 0x84, 0x01, 0xa3, 0x93, 0x56, 0x94, 0x06, 0x11,
	0xe1, 0x6e, 0x0d, 0x22, 0x92, 0xd8, 0xc0, 0x01, 0x66, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x06,
	0x11, 0xb2, 0xd4, 0xaa, 0x01, 0x00, 0x00,
}
